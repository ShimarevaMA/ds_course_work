import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns


def load_and_preprocess_data(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    data = pd.read_csv(uploaded_file)
    data = data.drop(columns=['UDI', 'Product ID', 'TWF', 'HDF', 'PWF', 'OSF', 'RNF'])
    data['Type'] = data['Type'].map({'L': 0, 'M': 1, 'H': 2})
    return data


def scale_features(data):
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    numerical_cols = ['Air temperature [K]', 'Process temperature [K]',
                      'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]']
    scaler = StandardScaler()
    data[numerical_cols] = scaler.fit_transform(data[numerical_cols])
    return data, scaler, numerical_cols


def train_model(X, y):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    y_proba = model.predict_proba(X_test)[:, 1]

    accuracy = accuracy_score(y_test, y_pred)
    auc = roc_auc_score(y_test, y_proba)

    return model, X_test, y_test, y_pred, accuracy, auc


def create_prediction_form(model, scaler, numerical_cols):
    """–§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    with st.form("prediction_form"):
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞")

        col1, col2 = st.columns(2)
        with col1:
            input_type = st.selectbox("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", options=['L', 'M', 'H'])
            air_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ [K]", min_value=250.0, max_value=350.0, value=300.0)
            process_temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ [K]", min_value=290.0, max_value=330.0, value=310.0)

        with col2:
            rotation_speed = st.number_input("–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è [rpm]", min_value=1000.0, max_value=3000.0,
                                             value=1500.0)
            torque = st.number_input("–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç [Nm]", min_value=10.0, max_value=100.0, value=40.0)
            tool_wear = st.number_input("–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ [min]", min_value=0, max_value=300, value=100)

        submitted = st.form_submit_button("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

        if submitted:
            input_data = {
                'Type': input_type,
                'Air temperature [K]': air_temp,
                'Process temperature [K]': process_temp,
                'Rotational speed [rpm]': rotation_speed,
                'Torque [Nm]': torque,
                'Tool wear [min]': tool_wear
            }
            return input_data
    return None


def make_prediction(model, input_data, scaler, numerical_cols):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    input_df = pd.DataFrame([input_data])
    input_df['Type'] = input_df['Type'].map({'L': 0, 'M': 1, 'H': 2})
    input_df[numerical_cols] = scaler.transform(input_df[numerical_cols])

    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]
    return prediction, probability


def display_analysis_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞"""
    st.title("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –º–æ–¥–µ–ª—å")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", type="csv")

    if uploaded_file:
        data = load_and_preprocess_data(uploaded_file)
        data, scaler, numerical_cols = scale_features(data)

        X = data.drop(columns=['Machine failure'])
        y = data['Machine failure']

        model, X_test, y_test, y_pred, accuracy, auc = train_model(X, y)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        st.subheader("–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")

        col1, col2 = st.columns(2)
        col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", f"{accuracy:.2%}")
        col2.metric("ROC-AUC", f"{auc:.2%}")

        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        fig, ax = plt.subplots()
        sns.heatmap(confusion_matrix(y_test, y_pred),
                    annot=True, fmt='d',
                    cmap='coolwarm',
                    ax=ax,
                    cbar=False)
        ax.set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã")
        ax.set_ylabel("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã")
        st.pyplot(fig)

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        st.divider()
        input_data = create_prediction_form(model, scaler, numerical_cols)

        if input_data:
            prediction, probability = make_prediction(model, input_data, scaler, numerical_cols)

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            if prediction == 1:
                st.error(f"‚ùå –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {probability:.2%}")
                st.write("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            else:
                st.success(f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {probability:.2%})")
                st.write("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")