import streamlit as st
import pandas as pd

def create_intro_section():
    st.header("üìå –í–≤–µ–¥–µ–Ω–∏–µ")
    st.markdown("""
    <div padding:20px;border-radius:10px">
        <h4>–¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:</h4>
        <ul>
            <li>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
            <li>–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–Ω–Ω–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–±–æ—è—Ö</li>
            <li>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)


def create_data_section():
    with st.expander("üìä –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
        st.markdown("""
        **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** AI4I 2020 Predictive Maintenance Dataset (10,000 –∑–∞–ø–∏—Å–µ–π)

        **–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:**
        - –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (L/M/H)
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ (K)
        - –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è (–æ–±/–º–∏–Ω)
        - –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç (–ù–º)
        - –ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–º–∏–Ω)

        **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤:**
        """)

        failure_data = {
            "–¢–∏–ø –æ—Ç–∫–∞–∑–∞": ["–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞", "–¢–µ–ø–ª–æ—Ä–∞—Å—Å–µ—è–Ω–∏–µ", "–°–±–æ–π –ø–∏—Ç–∞–Ω–∏—è"],
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–µ–≤": [120, 115, 95]
        }
        st.dataframe(pd.DataFrame(failure_data), hide_index=True)


def create_modeling_section():
    with st.expander("‚öôÔ∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", expanded=False):
        st.markdown("""
        **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–µ—à–µ–Ω–∏—è:**
        ```mermaid
        graph LR
            A[–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ] --> B{–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞};
            B --> C[–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏];
            C --> D[–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ];
            D --> E[–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è];
        ```

        **–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:**
        ```python
        RandomForestClassifier(
            n_estimators=100, 
            random_state=42,
            class_weight="balanced"
        )
        ```
        """)


def create_results_section():
    with st.expander("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", expanded=False):
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        col1, col2 = st.columns(2)
        col1.metric("–¢–æ—á–Ω–æ—Å—Ç—å (Accuracy)", "0.98", delta_color="off")
        col2.metric("ROC-AUC", "0.96", delta_color="off")

        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        feature_importance = pd.DataFrame({
            "–ü—Ä–∏–∑–Ω–∞–∫": ["–¢–∏–ø", "–ò–∑–Ω–æ—Å", "–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–°–∫–æ—Ä–æ—Å—Ç—å"],
            "–í–∞–∂–Ω–æ—Å—Ç—å": [0.35, 0.25, 0.20, 0.15, 0.05]
        })
        st.bar_chart(feature_importance.set_index("–ü—Ä–∏–∑–Ω–∞–∫"))


def create_demo_section():
    with st.expander("üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", expanded=False):
        st.markdown("""
        **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        **–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞:**
        """)

        example_data = {
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–¢–∏–ø", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞",
                         "–°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è", "–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç", "–ò–∑–Ω–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": ["L", "300 K", "310 K", "1500 rpm", "40 Nm", "100 min"]
        }
        st.table(pd.DataFrame(example_data))
        st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞ < 0.01%)")


def create_conclusion_section():
    with st.expander("‚úÖ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ", expanded=False):
        st.markdown("""
        **–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
        - –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–∞–∑–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 98%
        - –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        - –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –æ—Ç–∫–∞–∑—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

        **–î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:**
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IoT-–¥–∞—Ç—á–∏–∫–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é
        - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        """)


def display_presentation_page():
    st.title("üéØ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
    st.divider()

    create_intro_section()
    create_data_section()
    create_modeling_section()
    create_results_section()
    create_demo_section()
    create_conclusion_section()